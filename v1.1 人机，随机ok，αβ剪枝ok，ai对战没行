# -*- coding: utf-8 -*-

import random
import time
import copy

class Checkerboard:
	
	def __init__(self):
		self.checkerboard=[[-1,-1,-1,-1,-1,-1],
							[-1,-1,3,-1,-1,-1],
							[-1,3,0,1,-1,-1],
							[-1,-1,1,0,3,-1],
							[-1,-1,-1,3,-1,-1],
							[-1,-1,-1,-1,-1,-1]]
		self.bcnt=2	# black count
		self.wcnt=2	# white count
		self.color=1 # black=1,white=0,black first
		#self.end=False
	
	
	# clear all '+'
	def clear_board(self):
		cb=self.checkerboard
		n=6
		for i in range(n):
			for j in range(n):
				if cb[i][j]==3:
					cb[i][j]=-1
	def get_marked(self):
		cb=self.checkerboard
		n=6
		places=[]
		for i in range(n):
			for j in range(n):
				if cb[i][j]==3:
					places.append((i,j))
		return places
					
	def get_row(self,places,any_place,color):
		cb=self.checkerboard
		you=color
		opponent=1-you
		n=6
		for i in range(n):
			l_continuous_opponent=False # 连续的对方棋子被夹住
			r_continuous_opponent=False # 连续的对方棋子被夹住
			left_self=False
			right_self=False
			
			# left to right
			for j in range(n):
				if cb[i][j]==you:
					left_self=True
					l_continuous_opponent=False									
				if cb[i][j]==opponent:
					if left_self==True:
						l_continuous_opponent=True			
				if cb[i][j]==-1 and left_self==True and l_continuous_opponent==True:
					#cb[i][j]=3 # '+'
					if (i,j) not in places:
						places.append((i,j))
					left_self=False
					l_continuous_opponent=False	
					any_place=True
					#print('lr',i)
					#self.draw(you)
				if cb[i][j]==3:
					l_continuous_opponent=False				
					
			# right to left
			#for j in range(n-1,-1,-1):
				if cb[i][n-1-j]==you:
					right_self=True
					#if continuous_opponent==True:
					r_continuous_opponent=False									
				if cb[i][n-1-j]==opponent:
					if right_self==True:
						r_continuous_opponent=True	
					#right_self=False
				if cb[i][n-1-j]==-1 and right_self==True and r_continuous_opponent==True:
					#cb[i][n-1-j]=3
					if (i,n-1-j) not in places:
						places.append((i,n-1-j))
					right_self=False
					r_continuous_opponent=False	
					any_place=True
					#print('rl',i)
					#self.draw(you)
				if cb[i][n-1-j]==3:
					r_continuous_opponent=False	
		return places,any_place	
		
	def get_col(self,places,any_place,color):
		cb=self.checkerboard
		you=color
		opponent=1-you
		n=6
		for i in range(n):
			l_continuous_opponent=False # 连续的对方棋子被夹住
			r_continuous_opponent=False # 连续的对方棋子被夹住
			left_self=False
			right_self=False
			# up to down
			for j in range(n):
				if cb[j][i]==you:
					left_self=True
					#if continuous_opponent==True:
					l_continuous_opponent=False									
				if cb[j][i]==opponent:
					if left_self==True:
						l_continuous_opponent=True									
				if cb[j][i]==-1 and left_self==True and l_continuous_opponent==True:
					#cb[j][i]=3
					if (j,i) not in places:
						places.append((j,i))
					left_self=False
					l_continuous_opponent=False	
					any_place=True
					#print('ud')
					#self.draw(you)
				if cb[i][j]==3:
					l_continuous_opponent=False
			
			# down to up
			#for j in range(n-1,-1,-1):
				if cb[n-1-j][i]==you:
					right_self=True
					#if continuous_opponent==True:
					r_continuous_opponent=False									
				if cb[n-1-j][i]==opponent:
					if right_self==True:
						r_continuous_opponent=True			
				if cb[n-1-j][i]==-1 and right_self==True and r_continuous_opponent==True:
					#cb[n-1-j][i]=3
					if (n-1-j,i) not in places:
						places.append((n-1-j,i))
					right_self=False
					r_continuous_opponent=False	
					any_place=True
					#print('du')
					#self.draw(you)
				if cb[i][j]==3:
					r_continuous_opponent=False
		return places,any_place
		
	# https://blog.csdn.net/zzz_cming/article/details/81035354
	def get_diagonalline(self,places,any_place,color):
		cb=self.checkerboard
		you=color
		opponent=1-you
		n=6		
		# \ 预备
		#---
		list_1=[]
		list_2=[]
		#---
		for i in range(n+n-1):
			l_continuous_opponent=False # 连续的对方棋子被夹住
			r_continuous_opponent=False # 连续的对方棋子被夹住
			left_self=False
			right_self=False
			for j in range(i+1):
				k=i-j
				if k>=n or k<0 or j>=n:
					continue	
				#---		
				list_1.append(j)
				list_2.append(k)
				#---
				
				# / 向右上				
				if cb[k][j]==you:
					left_self=True
					l_continuous_opponent=False									
				if cb[k][j]==opponent:
					if left_self==True:
						l_continuous_opponent=True				
				if cb[k][j]==-1 and left_self==True and l_continuous_opponent==True:
					#cb[k][j]=3
					if (k,j) not in places:
						places.append((k,j))
					left_self=False
					any_place=True
					#print('right up')
					#self.draw(you)
				if cb[k][j]==3:
					l_continuous_opponent=False
					
				# / 向左下
				if cb[j][k]==you:
					right_self=True
					#if r_continuous_opponent==True:
					r_continuous_opponent=False									
				if cb[j][k]==opponent:
					if right_self==True:
						r_continuous_opponent=True				
				if cb[j][k]==-1 and right_self==True and r_continuous_opponent==True:
					#cb[j][k]=3
					if (j,k) not in places:
						places.append((j,k))
					right_self=False
					any_place=True		
					#print('left down')
					#self.draw(you)
				if cb[j][k]==3:
					r_continuous_opponent=False
		
		list_2=list(reversed(list_2))
		l3=[1,2,3,4,5, 6, 5, 4, 3, 2, 1]
		l4=[0,1,3,6,10,15,21,26,30,33,35]							
		# \ 向右下		
		for i in range(len(l3)):
			num=l3[i]
			start_index=l4[i]
			l_continuous_opponent=False # 连续的对方棋子被夹住
			left_self=False	
			for j in range(start_index,start_index+num):
				x=list_1[j]
				y=list_2[j]
				#print('rightdown',x,y)
				if cb[x][y]==you:
					left_self=True
					l_continuous_opponent=False									
				if cb[x][y]==opponent:
					if left_self==True:
						l_continuous_opponent=True				
				if cb[x][y]==-1 and left_self==True and l_continuous_opponent==True:
					#cb[x][y]=3
					#print('YES',1)
					if (x,y) not in places:
						places.append((x,y))
					left_self=False
					any_place=True
					#print('right down')
					#self.draw(you)
				if cb[x][y]==3:
					l_continuous_opponent=False
			
		# \ 向左上
		for i in range(len(l3)):
			#print('HEY!',1)
			num=l3[i]
			start_index=l4[i]
			#print(start_index,num)
			r_continuous_opponent=False # 连续的对方棋子被夹住
			right_self=False	
			for j in range(start_index+num-1,start_index-1,-1):
				#print('HEY!',2)
				x=list_1[j]
				y=list_2[j]
				#print('leftup',x,y)
				if cb[x][y]==you:
					right_self=True
					r_continuous_opponent=False									
				if cb[x][y]==opponent:
					if right_self==True:
						r_continuous_opponent=True				
				if cb[x][y]==-1 and right_self==True and r_continuous_opponent==True:
					#cb[x][y]=3
					#print('YES',2)
					if (x,y) not in places:
						places.append((x,y))
					right_self=False
					any_place=True
					#print('left up',x,y)
					#self.draw(you)
				if cb[x][y]==3:
					r_continuous_opponent=False
			
		return places,any_place		
			
	
	
	
	#下子方式：把自己颜色的棋子放在棋盘的空格上，而当自己放下的棋子在横、竖、斜八个方向
	#内有一个自己的棋子，则被夹在中间的对方棋子全部翻转会成为自己的棋子。夹住的位置上必
	#须全部是对手的棋子，不能有空格。并且只有在可以翻转棋子的地方才可以下子。
	def get_place(self,color):
	# 找出可以放棋的位置
		cb=self.checkerboard
		co=color
		n=6
		
		# 1.没有同色棋子
		bcnt=self.bcnt
		wcnt=self.wcnt
		if co==1 and bcnt==0:
			self.draw(10) # white win
			return 
		if co==0 and wcnt==0:
			self.draw(9) # black win
			return 
		
		# 2.棋盘满了
		is_full=True
		for i in range(n):
			for j in range(n):
				if cb[i][j]==-1:
					is_full=False
					break
		if is_full:
			# 当前颜色棋子输
			#self.draw(9+co)	
			#self.draw(co)
			self.end_game(1-co)		
			return
			
		# 3.放+
		self.clear_board()
		any_place=False	
		places=[]	
		places,any_place=self.get_row(places,any_place,color)
		places,any_place=self.get_col(places,any_place,color)
		places,any_place=self.get_diagonalline(places,any_place,color)
		
		#if any_place==False:
			# 当前颜色棋子输
		#	self.draw(9+co)
		#	self.end_game()
		
		for tu in places:
			self.checkerboard[tu[0]][tu[1]]=3
			
		return places
			
			
	def flip_row(self,flips,pos,color):
		cb=self.checkerboard
		you=color
		opponent=1-you
		x=pos[0]
		y=pos[1]		
		n=6		
		
		# left side
		for j in range(y-1,-1,-1):		
			if cb[x][j]==you:		
				for k in range(j+1,y):
					if cb[x][k]==opponent:
						if (x,k) not in flips:
							flips.append((x,k))
				break		
			'''			
			if cb[x][j]==opponent:
				l_continuous_opponent=True				
			if cb[x][j]==opponent and left_self==True:				
				#cb[x][j]=you	
				if (x,j) not in flips:
					flips.append((x,j))
			'''		
		# right side
		for j in range(y+1,n):
			if cb[x][j]==you:		
				for k in range(y+1,j):
					if cb[x][k]==opponent:
						if (x,k) not in flips:
							flips.append((x,k))
				break		
			'''
			if cb[x][j]==you:	
				right_self=True	
				r_continuous_opponent=False	
				break								
			if cb[x][j]==opponent:
				#r_continuous_opponent=True	
				#cb[x][j]=you
				if (x,j) not in flips:
					flips.append((x,j))
				can_flip=True
			'''
		return flips
			
				
	def flip_col(self,flips,pos,color):
		cb=self.checkerboard
		you=color
		opponent=1-you
		x=pos[0]
		y=pos[1]		
		n=6		
		# above
		for j in range(x-1,-1,-1):		
			if cb[j][y]==you:		
				for k in range(j+1,x):
					if cb[k][y]==opponent:
						if (k,y) not in flips:
							flips.append((k,y))
				break		
		
		# below
		for j in range(x+1,n):
			if cb[j][y]==you:		
				for k in range(j-1,x,-1):
					if cb[k][y]==opponent:
						if (k,y) not in flips:
							flips.append((k,y))
				break		
		return flips
		
	
	def flip_diagonal(self,flips,pos,color):
		cb=self.checkerboard
		you=color
		opponent=1-you
		n=6	
		x=pos[0]
		y=pos[1]
					
		list_1=[]
		list_2=[]	
		num_idx=0	
		for i in range(n+n-1):
			for j in range(i+1):
				k=i-j			
				if k>=0 and k<n and j<n:
					list_1.append(j)
					list_2.append(k)				
					if j==x and k==y:
						num_idx=i
		#print(list_1)
		#print(list_2)	
				
		#print(num_idx)
		l3=[1,2,3,4,5, 6, 5, 4, 3, 2, 1]
		l4=[0,1,3,6,10,15,21,26,30,33,35]		
		
		num=l3[num_idx]
		start_idx=l4[num_idx]
		
		l5=[]
		l6=[]
		for i in range(num):
			l5.append(list_1[start_idx+i])
			l6.append(list_2[start_idx+i])
		#print(l5)
		#print(l6)
		
		# / 向右上
		for i in range(num):
			k=l5[i]
			j=l6[i]
			#print(k,j)
			if k==x and j==y:
				for o in range(i+1,num):
					k=l5[o]
					j=l6[o]
					#print(k,j)									
					if cb[k][j]==you:		
						#print('ru')	
						for m in range(i+1,o):
							k=l5[m]
							j=l6[m]
							if cb[k][j]==opponent:
								if (k,j) not in flips:
									flips.append((k,j))
						break		
				
		for i in range(num):
			k=l5[i]
			j=l6[i]
			#print(k,j)
			if k==x and j==y:
				#print(j,k)
				for o in range(i+1,num):
					k=l5[o]
					j=l6[o]
					#print(k,j)
					# / 向左下
					if cb[j][k]==you:
						#print(j,k)
						#print('ld')	
						for m in range(i+1,o):
							k=l5[m]
							j=l6[m]
							#print(j,k)
							if cb[j][k]==opponent:
								#print('f',j,k)
								if (j,k) not in flips:
									flips.append((j,k))
						break	
		
							
		# \ 向右下
		list_2=list(reversed(list_2))
		#print(list_2)
		
		for i in range(n+n-1):
			#print(l4[i]+j)
			if l4[i]+j<36:
				if list_1[l4[i]+j]==x and list_2[l4[i]+j]==y:
					break
				for j in range(l3[i]):	
					#print(list_1[l4[i]+j],list_2[l4[i]+j])							
					if list_1[l4[i]+j]==x and list_2[l4[i]+j]==y:
						#print('!')
						num_idx=i
						break
			
		#print(l3)
		#print(num_idx)			
		num=l3[num_idx]
		#print(num)
		start_idx=l4[num_idx]
		#l_continuous_opponent=False # 连续的对方棋子被夹住
		#r_continuous_opponent=False # 连续的对方棋子被夹住

		l7=[]
		l5=[]
		for i in range(num):
			l5.append(list_1[start_idx+i])
			l7.append(list_2[start_idx+i])
		#print(l5)
		#print(l7)
		#print('rd')	
		for i in range(num):	
			k=l5[i]
			j=l7[i]
			#print(k,j)
			if k==x and j==y:
				for o in range(i+1,num):
					k=l5[o]
					j=l7[o]
					#print(k,j)
					if cb[k][j]==you:	
						#print('rd')			
						for m in range(i+1,o):
							k=l5[m]
							j=l7[m]							
							if cb[k][j]==opponent:
								if (k,j) not in flips:
									flips.append((k,j))
						break	
			
		# \ 向左上		
		#l_continuous_opponent=False # 连续的对方棋子被夹住
		#r_continuous_opponent=False # 连续的对方棋子被夹住
		for i in range(num-1,-1,-1):	
			k=l5[i]
			j=l7[i]
			#print(k,j)
			if k==x and j==y:
				for o in range(i-1,-1,-1):	
					k=l5[o]
					j=l7[o]	
					#print(k,j)
					if cb[k][j]==you:	
						#print('LU')	
						for m in range(i-1,o,-1):
							k=l5[m]
							j=l7[m]							
							if cb[k][j]==opponent:
								if (k,j) not in flips:
									flips.append((k,j))
						break	
						
		return flips
		
		
	
	
	def flip(self,pos,color):
		flipped=[]
		flipped=self.flip_row(flipped,pos,color)
		flipped=self.flip_col(flipped,pos,color)
		flipped=self.flip_diagonal(flipped,pos,color)
		return flipped
		
	
	def put_chess(self,pos,color):
		cb=self.checkerboard
		co=color
		x=pos[0]
		y=pos[1]
		if cb[x][y]==3:
			#print('yes')
			cb[x][y]=co
			
			flipped=self.flip(pos,co)		
			#print('1',flipped)		
			for tu in flipped:
				cb[tu[0]][tu[1]]=co		
	
			return flipped
		return []
		
	
	# pos-要撤销的棋子位置, flipped-被翻转的位置列表
	def undo(self,pos,flipped,color):
		co=color
		opco=1-co
		cb=self.checkerboard
	
		for p in flipped :
			cb[pos[0]][pos[1]]=opco
		#self.draw(co)	
		cb[pos[0]][pos[1]]=-1		
		#self.draw(co)
		self.clear_board()		
	
		
	def draw(self, alive):
	# 6*6 checkerboard
	# chess=(x,y) new chess position
	# alive=1 alive;0 you lose;-1 ai lose
		print('='*60)
		if alive==9:
			print('BLACK WIN')			
		elif alive==10:
			print('WHITE WIN')			
		elif alive==1:
			print('BLACK CHESS ROUND')
		elif alive==0:
			print('WHITE CHESS ROUND')
		print()	
		
		#for tu in places:
		#	self.checkerboard[tu[0]][tu[1]]=3
			
		self.bcnt=0
		self.wcnt=0	
		print('   0   1   2   3   4   5   ')
		#columns=['A','B','C','D','E','F']
		print('-'*26)
		for i in range(6):
			for j in range(6):
				if j==0:
					print(i,end='')
				ch=' '
				if self.checkerboard[i][j]==-1: #null
					ch=' '
				elif self.checkerboard[i][j]==1: # black
					ch='x'
					self.bcnt+=1
				elif self.checkerboard[i][j]==0: # white
					ch='o'
					self.wcnt+=1
				elif self.checkerboard[i][j]==3: # canput
					ch='+'
				
				print('|',ch,'',end='')
			print('|')
			print('-'*26)
		
		print()
		print('black chess:',self.bcnt,'  white chess:',self.wcnt)
		

	
	def start_game(self):
		print('='*60)
		self.color=input('Choose your color(0-white, 1-black, black first): ')
		print('='*60)
		print('Game start')
		print('x-black chess, o-white chess, +-place to put chess')
		
		self.color=int(self.color)	
		if self.color==1:
			self.checkerboard[3][4]=3
			self.checkerboard[4][3]=3	
			self.checkerboard[1][2]=3
			self.checkerboard[2][1]=3
		elif self.color==0:
			self.checkerboard[1][3]=3
			self.checkerboard[2][4]=3	
			self.checkerboard[3][1]=3
			self.checkerboard[4][2]=3
			
		self.draw(self.color)
	
	
	# color-winner
	def end_game(self,color):
		#self.end=True5
		self.draw(1-color)
		if color:
			ch='BALCK'
		else:
			ch='WHITE'
		print('='*60)
		print(ch,' WIN')
		
		#exit('Game end')

class Player:
	def __init__(self,color):
		self.color=color
		
	def think(self,cb):
		pass
		
		
	def put_chess(self,board,pos,co):
		flipped=board.put_chess(pos,co)
		#print('2',flipped)
		return flipped
	
	
	def undo(self,board,pos,flipped,color):
		board.undo(pos,flipped,color)
		
		
	
class HumanPlayer(Player):
	def __init__(self,color):
		super().__init__(color)
	
	def think(self,board):
		co=self.color
		cb=board.checkerboard
		
		#places=board.get_place(co)
		#print(places)
			
		#for tu in places:
		#	board.checkerboard[tu[0]][tu[1]]=3	
			
		flag=False
		while flag==False:
			print('='*60)
			print("Put a chess in a '+' block.")
			x=input("Input the row index: ")
			y=input("Input the column index: ")
			x=int(x)
			y=int(y)			
					
			if cb[x][y]==3:
				flag=True
				pos=(x,y)
				
				ch=['white','black'][co]
				print('='*60)
				print(ch,' action: ',pos)
				
				flipped=self.put_chess(board,pos,co)
	
				# 对方回合
				opp_places=board.get_place(1-co)
				if not opp_places:
					# 当对方色棋子输										
					#board.clear_board()
					#board.draw(10-co)
					#board.draw(1-co)
					board.end_game(co)
					
				else:
					#print(places)
					board.draw(1-co)		
					
			if not flag:
				print("This block is not allow to put a chess, choose another one.")
		


class AI:
	def __init__(self,lev=1):
		self.level=lev
		#self.choice=['random','minimax-alpha-beta'][self.level]
		# 棋盘位置权重，参考：https://github.com/k-time/ai-minimax-agent/blob/master/ksx2101.py
		'''
		self.weight_board=[[120, -20,  20,   5,   5,  20, -20, 120],
							[-20, -40,  -5,  -5,  -5,  -5, -40, -20],
							[ 20,  -5,  15,   3,   3,  15,  -5,  20],
							[  5,  -5,   3,   3,   3,   3,  -5,   5],
							[  5,  -5,   3,   3,   3,   3,  -5,   5],
							[ 20,  -5,  15,   3,   3,  15,  -5,  20],
							[-20, -40,  -5,  -5,  -5,  -5, -40, -20],
							[120, -20,  20,   5,   5,  20, -20, 120]]
		'''
		self.weight_board=[[120,  -20,  13, 13, -20, 120],
							[-20, -40,  -5, -5, -40, -20],
							[ 13,  -5,   6,  6,  -5,  13],
							[ 13,  -5,   6,  6,  -5,  13],
							[-20, -40,  -5, -5, -40, -20],
							[120, -20,  13, 13, -20, 120]]
							
	def evaluate(self,cb):
	# black-max, white-min
		co=self.color
		opco=1-co
		wb=self.weight_board
		n=6
		score=0
		for i in range(n):
			for j in range(n):
				if cb[i][j]==co:
					score+=wb[i][j]
				elif cb[i][j]==opco:
					score-=wb[i][j]
		return score
		
	
	def brain(self,board,opponent,depth=8):
		if self.level:
			best_score,action=self.minimax_alpha_beta(board,opponent,depth)
			print('best score=',best_score)
		else:
			action=self.random_choice(board)
			
		return action
	
	
	def random_choice(self,board):
		co=self.color
		#actions=board.get_place(co)
		actions=board.get_marked()
		
		#print(actions)
		#for a in actions:
		#	print(board.checkerboard[a[0]][a[1]])
		
		action=random.choice(actions)
		#print('!',action)
		return action
	
	
	# board-棋盘对象,opponent-假想敌对象
	# α初始为-∞, β初始为∞
	def minimax_alpha_beta(self,board,opponent,depth=8,\
	my_best=-float('inf'),opp_best=float('inf')):
		co=self.color #1-opponent.color
		cb=copy.deepcopy(board.checkerboard)
		
		# enough
		if depth==0:
			return self.evaluate(cb),None
			
		#actions=board.get_place(1-co)
		actions=board.get_marked()
		
		if not actions:
			return self.evaluate(cb),None
			# 当前颜色棋子输
			#self.draw(9+co)
			#self.end_game()
		#actions=board.get_marked()
		
		best_score=my_best	
		best_action=None
		
		for ac in actions:
			# ac is tuple, flips is list of flipped places
			flipped=board.put_chess(ac,co)
			
			#actions=board.get_place(1-co)
			opp_actions=board.get_place(1-co)
			
			#ch=['white','black'][co]
			#print('='*60)
			#print('trying ',ch,' action: ',ac)
			#board.draw(1-co)
			
			# 深度优先, 轮到陪练
			# opp_best是敌人的α
			score, opp_action = opponent.minimax_alpha_beta(board,self,\
			depth-1,-opp_best,-best_score)
			
			#[!!!!!!!!]
			#ch=['white','black'][co]
			#print('='*60)
			
			#print('undo ',ch,' action: ',ac)
			#print(flipped)
			board.undo(ac,flipped,co)
			
			'''
			flag=True
			for i in range(6):
				for j in range(6):
					board.checkerboard[i][j]
			'''

			#board.draw(1-co)
			#print('deepest')
			#time.sleep(100)
			
			score=-score
			if score>best_score:
				best_score=score
				best_action=ac
			
			# 大于祖先节点中的β, 剪枝
			if best_score>opp_best:
				#print('prune, opp_best=',opp_best,\
				#' ,best score=',best_score)
				break
		
		board.checkerboard=cb
		#time.sleep(100)		
		return best_score,best_action
		


class AIPlayer(Player, AI):
	def __init__(self,color,level=1):
		super().__init__(color) # init Player
		super(Player,self).__init__(level) # init AI
	
	def think(self,board):
		co=self.color
		cb=board.checkerboard
		opco=1-co
		opponent=AIPlayer(opco,1)
		print('='*60)
		print('AI is thinking')
		pos=self.brain(board,opponent,8)
		
		ch=['white','black'][co]
		print('='*60)
		print(ch,' action: ',pos)
		
		#print(cb[pos[0]][pos[1]])

		flipped=self.put_chess(board,pos,co)
		#print('3',flipped)
		#board.checkerboard[pos[0]][pos[1]]=co
		
		# 获取另一颜色的+
		opco=1-co				
		places=board.get_place(opco)
		if not places:
			# 对方颜色棋子输
			#board.clear_board()
			#board.draw(10-co)
			#board.draw(1-co)
			board.end_game(co)		
		
		else:
			board.draw(opco)



class Game:
	def __init__(self):
		self.board=Checkerboard()
		self.current_player=None
		
	
	def make_2_players(self):
		print('='*60)
		mode=input('Choose battle mode(0-pve, 1-ai vs ai): ')
		mode=int(mode)
		if not mode:
			color=input('Choose your color(0-white, 1-black, black first): ')
			level=input('Choose AI level(0-random, 1-minimax with alpha beta prune): ')
			print('='*60)
			print('Game start')
			print('x - black chess, o - white chess, + - place to put chess')
			
			human_color=int(color)	
			ai_color=1-human_color
			level=int(level)
			
			if color:
				player1=HumanPlayer(human_color)
				player2=AIPlayer(ai_color,level)
			else:
				player1=AIPlayer(ai_color,level)
				player2=HumanPlayer(human_color)
		
		else:
			choose_ai_co1or=input('Choose AI1 color(0-white, 1-black, black first): ')
			print(choose_ai_color)
			co1=int(choose_ai_color)	
			co2=1-co1
			print('AI 1 color: ',['white','black'][co1==1],\
			' AI 2 color: ',['white','black'][co2==1])
			lev1=input('Choose AI1 level(0-random, 1-minimax with alpha beta prune): ')
			lev2=input('Choose AI2 level(0-random, 1-minimax with alpha beta prune): ')
			print('='*60)
			print('Game start')
			print('x -black chess, o -white chess, + -place to put chess')
			
			ai1_color=int(color)	
			ai2_color=1-ai1_color
			lev1=int(lev1)
			lev2=int(lev2)
			
			if ai1_color:
				player1=AIPlayer(ai1_color,lev1)
				player2=AIPlayer(ai2_color,lev2)
			else:
				player1=AIPlayer(ai2_color,lev2)
				player2=AIPlayer(ai1_color,lev1)					
		
		places=self.board.get_place(player1.color)
		#print(p)
		#for tu in p:
		#	print(self.board.checkerboard[tu[0]][tu[1]])
			
		self.board.draw(player1.color)
		
		return player1,player2
		
		
	def switch_player(self,p1,p2):
		if self.current_player==None:
			return p1
		else:
			return [p1,p2][self.current_player==p1]
			
		
	def run(self):
		p1,p2=self.make_2_players()
		
		while 1:
			self.current_player=self.switch_player(p1,p2)
			self.current_player.think(self.board)
			#places=self.board.get_place(1-self.current_player.color)
		

'''
def test_draw():		
	board=Checkerboard()
	board.start_game()
	color=board.color
	player=HumanPlayer(color)
	player.think(board)
	player.think(board)
	player.think(board)
	player.think(board)
	player.think(board)
	player.think(board)
	player.think(board)
	player.think(board)
	player.think(board)
	player.think(board)
	#for i in range(6):
	#	for j in range(6):
	#		cb.checkerboard[i][j]=(i+j)%2
	#cb.checkerboard[3][3]=3
	#print(cb.checkerboard)
	#cb.draw(1-color)
	#cb.draw(1-color)
	#cb.draw(9)
	print('='*60)
'''
	


	
#test_draw()

game=Game()
game.run()

